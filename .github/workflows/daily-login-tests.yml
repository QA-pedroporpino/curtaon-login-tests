# =================================================================
# Workflow de Testes Automatizados - CurtaON
# Mantido por: Time de QA
# √öltima atualiza√ß√£o: Fevereiro 2024
# =================================================================

name: Testes de Login Di√°rios

# Defini√ß√£o dos triggers do workflow
on:
  # Execu√ß√£o agendada - 3h UTC (meia-noite hor√°rio de Bras√≠lia)
  schedule:
    - cron: "0 3 * * *"
  # Permite execu√ß√£o manual via UI
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Habilitar modo debug com logs detalhados"
        required: false
        default: false
        type: boolean
      test_filter:
        description: "Filtro de testes a serem executados (opcional)"
        required: false
        type: string
        default: ""

# Configura√ß√µes globais e permiss√µes
permissions:
  contents: read
  actions: write
  checks: write # Necess√°rio para publicar resultados de teste

# Vari√°veis de ambiente globais
env:
  PYTHON_VERSION: "3.11"
  PYTHONUNBUFFERED: "1" # For√ßa output sem buffer
  FORCE_COLOR: "1" # For√ßa sa√≠da colorida
  DEBIAN_FRONTEND: "noninteractive"
  # Configura√ß√µes do Chrome
  DISPLAY: ":99"
  CHROME_BIN: "/usr/bin/google-chrome"
  # Diret√≥rios do projeto
  PROJECT_ROOT: "."
  TESTS_DIR: "tests/test_cases"
  ARTIFACTS_DIR: "artifacts"
  REPORTS_DIR: "artifacts/reports"
  HTML_DIR: "artifacts/html"
  SCREENSHOTS_DIR: "artifacts/screenshots"
  LOGS_DIR: "artifacts/logs"
  # Configura√ß√µes de debug
  DEBUG: ${{ github.event.inputs.debug_enabled == 'true' }}
  # Configura√ß√µes de cache
  CACHE_VERSION: "v1"
  # Configura√ß√µes do Python
  PYTHONPATH: ${{ github.workspace }}

jobs:
  test:
    name: Executar Suite de Testes
    # Usando Ubuntu 22.04 para garantir compatibilidade com libgconf-2-4
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      # ==== SETUP DO AMBIENTE ====
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: |
            **/requirements.txt
            setup.py

      - name: Criar ambiente virtual e instalar depend√™ncias
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install pytest pytest-html pytest-xvfb selenium webdriver-manager pillow
          if [ -f "setup.py" ]; then
            pip install -e .
          fi
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          if [ -f "tests/test_cases/requirements.txt" ]; then
            pip install -r tests/test_cases/requirements.txt
          fi

      - name: Criar diret√≥rios necess√°rios
        run: |
          mkdir -p ${{ env.ARTIFACTS_DIR }}
          mkdir -p ${{ env.REPORTS_DIR }}
          mkdir -p ${{ env.HTML_DIR }}
          mkdir -p ${{ env.SCREENSHOTS_DIR }}
          mkdir -p ${{ env.LOGS_DIR }}

      # ==== SETUP DO CHROME E XVFB ====
      - name: Setup Chrome e ambiente gr√°fico
        run: |
          # Instala depend√™ncias
          sudo apt-get update -q
          sudo apt-get install -y --no-install-recommends \
            xvfb \
            libnss3 \
            libgconf-2-4 \
            libfontconfig1
          # Instala Chrome
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get install -f -y
          rm google-chrome-stable_current_amd64.deb
          # Inicia Xvfb
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
          sleep 3

      # ==== EXECU√á√ÉO DOS TESTES ====
      - name: Executar testes
        run: |
          source .venv/bin/activate
          # Lista todos os arquivos de teste
          echo "Arquivos de teste encontrados:"
          find ${{ env.TESTS_DIR }} -name "test_*.py" -type f
          # Executa os testes
          PYTHONPATH=${{ github.workspace }} pytest \
            ${{ env.TESTS_DIR }} \
            -v \
            --junitxml=${{ env.REPORTS_DIR }}/junit.xml \
            --html=${{ env.HTML_DIR }}/report.html \
            --self-contained-html \
            --capture=no \
            --log-cli-level=INFO \
            --log-file=${{ env.LOGS_DIR }}/pytest.log \
            ${{ github.event.inputs.test_filter && format('--filter={0}', github.event.inputs.test_filter) || '' }}

      # ==== PUBLICA√á√ÉO DE ARTEFATOS ====
      - name: Publicar relat√≥rio HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-html
          path: ${{ env.HTML_DIR }}
          if-no-files-found: warn

      - name: Publicar screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: ${{ env.SCREENSHOTS_DIR }}
          if-no-files-found: warn

      - name: Publicar logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: ${{ env.LOGS_DIR }}
          if-no-files-found: warn

      # ==== PUBLICA√á√ÉO DE RESULTADOS ====
      - name: Publicar resultados dos testes
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "${{ env.REPORTS_DIR }}/junit.xml"
          comment_mode: off

      # ==== DEBUG FINAL ====
      - name: Debug final
        if: always()
        run: |
          echo "::group::üìú Log do Pytest"
          cat "${LOGS_DIR}/pytest.log" || echo "Log n√£o encontrado"
          echo "::endgroup::"
          echo "::group::üß© Vari√°veis de Ambiente"
          printenv | sort
          echo "::endgroup::"
          echo "::group::üêç Depend√™ncias Python"
          pip list --format=columns
          echo "::endgroup::"
          echo "::group::üîç Estrutura Final"
          ls -R
          echo "::endgroup::"

      # ==== CLEANUP ====
      - name: Cleanup
        if: always()
        run: |
          set -eo pipefail
          echo "::group::üßπ Limpando ambiente"
          if [ -f /tmp/xvfb.pid ]; then
            kill $(cat /tmp/xvfb.pid) || true
            rm /tmp/xvfb.pid
          fi
          pkill Xvfb || true
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          echo "::endgroup::"
