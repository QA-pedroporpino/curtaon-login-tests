# =================================================================
# Workflow de Testes Automatizados - CurtaON
# Mantido por: Time de QA
# √öltima atualiza√ß√£o: Fevereiro 2024
# =================================================================

name: Testes de Login Di√°rios

# Defini√ß√£o dos triggers do workflow
on:
  # Execu√ß√£o agendada - 3h UTC (meia-noite hor√°rio de Bras√≠lia)
  schedule:
    - cron: "0 3 * * *"
  # Permite execu√ß√£o manual via UI
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Habilitar modo debug com logs detalhados"
        required: false
        default: false
        type: boolean
      test_filter:
        description: "Filtro de testes a serem executados (opcional)"
        required: false
        type: string
        default: ""

# Configura√ß√µes globais e permiss√µes
permissions:
  contents: read
  actions: write
  checks: write # Necess√°rio para publicar resultados de teste

# Vari√°veis de ambiente globais
env:
  PYTHON_VERSION: "3.11"
  PYTHONUNBUFFERED: "1" # For√ßa output sem buffer
  FORCE_COLOR: "1" # For√ßa sa√≠da colorida
  DEBIAN_FRONTEND: "noninteractive"
  # Configura√ß√µes do Chrome
  DISPLAY: ":99"
  CHROME_BIN: "/usr/bin/google-chrome"
  # Diret√≥rios do projeto
  PROJECT_ROOT: "."
  TESTS_DIR: "tests/test_cases"
  ARTIFACTS_DIR: "artifacts"
  REPORTS_DIR: "artifacts/reports"
  HTML_DIR: "artifacts/html"
  SCREENSHOTS_DIR: "artifacts/screenshots"
  LOGS_DIR: "artifacts/logs"
  # Configura√ß√µes de debug
  DEBUG: ${{ github.event.inputs.debug_enabled == 'true' }}
  # Configura√ß√µes de cache
  CACHE_VERSION: "v1"

jobs:
  test:
    name: Executar Suite de Testes
    # Usando Ubuntu 22.04 para garantir compatibilidade com libgconf-2-4
    runs-on: ubuntu-22.04

    steps:
      # ==== SETUP DO AMBIENTE ====
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            setup.py

      # ==== SETUP DO CHROME E XVFB ====
      - name: Setup Chrome e ambiente gr√°fico
        id: setup-chrome
        run: |
          set -eo pipefail

          echo "::group::üîß Instalando depend√™ncias do sistema"
          sudo apt-get update -q
          sudo apt-get install -y --no-install-recommends \
            xvfb \
            libnss3 \
            libgconf-2-4 \
            libfontconfig1 \
            tree  # Para debug da estrutura de diret√≥rios
          echo "::endgroup::"

          echo "::group::üåê Instalando Google Chrome"
          # Remove vers√£o antiga se existir
          sudo apt-get remove -y google-chrome-stable || true

          # Baixa e instala a vers√£o mais recente do Chrome
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -f install -y
          rm google-chrome-stable_current_amd64.deb

          # Obt√©m a vers√£o exata do Chrome instalado
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3)
          echo "chrome_version=${CHROME_VERSION}" >> $GITHUB_OUTPUT
          echo "::endgroup::"

          echo "::group::üîß Instalando ChromeDriver"
          # Download e instala√ß√£o do ChromeDriver compat√≠vel
          wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROME_VERSION}/linux64/chromedriver-linux64.zip"
          unzip -q chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          rm -rf chromedriver-linux64*
          echo "::endgroup::"

          echo "::group::üñ•Ô∏è Configurando Display Virtual"
          # Inicia Xvfb em background
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo $! > /tmp/xvfb.pid  # Salva PID para cleanup
          echo "::endgroup::"

          echo "::group::‚úÖ Verificando vers√µes"
          echo "Chrome version: $(google-chrome --version)"
          echo "ChromeDriver version: $(chromedriver --version)"
          echo "::endgroup::"

      # ==== VERIFICA√á√ÉO DE SA√öDE DO AMBIENTE ====
      - name: Verificar sa√∫de do ambiente
        run: |
          echo "::group::üîç Verificando sa√∫de do ambiente"
          # Verifica se o Chrome est√° instalado e funcionando
          if ! command -v google-chrome &> /dev/null; then
            echo "‚ùå Chrome n√£o encontrado!"
            exit 1
          fi

          # Verifica se o ChromeDriver est√° instalado e funcionando
          if ! command -v chromedriver &> /dev/null; then
            echo "‚ùå ChromeDriver n√£o encontrado!"
            exit 1
          fi

          # Verifica se o Xvfb est√° rodando
          if ! pgrep Xvfb > /dev/null; then
            echo "‚ùå Xvfb n√£o est√° rodando!"
            exit 1
          fi

          echo "‚úÖ Ambiente verificado com sucesso"
          echo "::endgroup::"

      # ==== SETUP PYTHON E DEPEND√äNCIAS ====
      - name: Setup ambiente Python
        id: setup-env
        run: |
          set -eo pipefail

          echo "::group::üêç Criando ambiente virtual"
          python -m venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "::endgroup::"

          echo "::group::üì¶ Instalando depend√™ncias"
          # Upgrade pip e setuptools
          python -m pip install --upgrade pip setuptools wheel

          # Instala pytest e plugins primeiro para garantir vers√µes corretas
          pip install pytest==7.4.3 \
                    pytest-html==4.1.1 \
                    pytest-cov==4.1.0 \
                    pytest-xdist==3.3.1 \
                    pytest-timeout==2.2.0 \
                    pytest-rerunfailures==12.0

          # Instala depend√™ncias do projeto
          pip install -r requirements.txt
          pip install -e .

          # Verifica instala√ß√£o do pytest-html
          echo "Verificando instala√ß√£o do pytest-html:"
          pip show pytest-html
          pytest --trace-config | grep -i "html"
          echo "::endgroup::"

      # ==== PREPARA√á√ÉO DOS DIRET√ìRIOS ====
      - name: Preparar diret√≥rios
        run: |
          echo "::group::üìÅ Criando diret√≥rios para artefatos"
          # Cria diret√≥rios com -p para n√£o falhar se j√° existirem
          mkdir -p "${ARTIFACTS_DIR}"/{reports,html,screenshots,logs}

          # Garante permiss√µes corretas
          chmod -R 777 "${ARTIFACTS_DIR}"

          echo "Estrutura de diret√≥rios ap√≥s cria√ß√£o:"
          tree "${ARTIFACTS_DIR}" || ls -R "${ARTIFACTS_DIR}"
          echo "::endgroup::"

      # ==== VERIFICA√á√ÉO DOS ARQUIVOS DE TESTE ====
      - name: Verificar arquivos de teste
        run: |
          echo "::group::üîç Verificando arquivos de teste"
          echo "Diret√≥rio atual: $(pwd)"
          echo "Conte√∫do do diret√≥rio de testes:"
          ls -R "${TESTS_DIR}"
          echo "::endgroup::"

      # ==== EXECU√á√ÉO DOS TESTES ====
      - name: Executar testes
        id: run-tests
        timeout-minutes: 30 # Timeout de seguran√ßa
        env:
          PYTHONPATH: ${{ github.workspace }}
          PYTEST_ADDOPTS: "--color=yes"
          TEST_FILTER: ${{ github.event.inputs.test_filter }}
        run: |
          set -eo pipefail

          echo "::group::üß™ Preparando execu√ß√£o dos testes"
          echo "Diret√≥rio atual: $(pwd)"
          echo "PYTHONPATH: ${PYTHONPATH}"
          echo "Diret√≥rio de testes: ${TESTS_DIR}"
          echo "Filtro de testes: ${TEST_FILTER}"
          echo "::endgroup::"

          echo "::group::üß™ Executando suite de testes"
          # Executa pytest com tratamento de erro
          pytest "${TESTS_DIR}"/ \
            ${TEST_FILTER:+ -k "${TEST_FILTER}"} \
            --html="${HTML_DIR}/report.html" \
            --self-contained-html \
            --junitxml="${REPORTS_DIR}/junit.xml" \
            -v \
            --reruns 2 \
            --reruns-delay 1 \
            -n auto \
            --dist loadfile \
            --cov=src \
            --cov-report=html:"${REPORTS_DIR}/coverage" \
            --cov-report=xml:"${REPORTS_DIR}/coverage.xml" \
            --log-cli-level=INFO \
            --capture=tee-sys \
            --timeout=300 \
            | tee "${LOGS_DIR}/pytest.log" || test_exit_code=$?

          echo "::group::üìä Verificando artefatos gerados"
          echo "Conte√∫do do diret√≥rio de relat√≥rios:"
          ls -la "${REPORTS_DIR}"
          echo "Conte√∫do do diret√≥rio HTML:"
          ls -la "${HTML_DIR}"

          # Verifica se os relat√≥rios foram gerados
          for report in "junit.xml" "coverage.xml"; do
            if [ -f "${REPORTS_DIR}/${report}" ]; then
              echo "‚úÖ ${report} gerado com sucesso"
              echo "Tamanho: $(stat -f %z "${REPORTS_DIR}/${report}") bytes"
            else
              echo "‚ùå ${report} n√£o encontrado!"
            fi
          done

          for report in "report.html"; do
            if [ -f "${HTML_DIR}/${report}" ]; then
              echo "‚úÖ ${report} gerado com sucesso"
              echo "Tamanho: $(stat -f %z "${HTML_DIR}/${report}") bytes"
            else
              echo "‚ùå ${report} n√£o encontrado!"
            fi
          done

          # Verifica estrutura completa
          echo "Estrutura final de artefatos:"
          tree "${ARTIFACTS_DIR}" || ls -R "${ARTIFACTS_DIR}"
          echo "::endgroup::"

          # Propaga o c√≥digo de sa√≠da do pytest se houver falha
          if [ -n "$test_exit_code" ]; then
            echo "Testes falharam com c√≥digo $test_exit_code"
            exit $test_exit_code
          fi

      # ==== PUBLICA√á√ÉO DE ARTEFATOS ====
      - name: Publicar artefatos
        if: always() # Executa mesmo se os testes falharem
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            ${{ env.ARTIFACTS_DIR }}
          retention-days: 14
          if-no-files-found: warn # Avisa mas n√£o falha se n√£o encontrar arquivos

      # ==== PUBLICA√á√ÉO DE RESULTADOS ====
      - name: Publicar resultados dos testes
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "${{ env.REPORTS_DIR }}/junit.xml"
          comment_mode: off

      # ==== DEBUG FINAL ====
      - name: Debug final
        if: always()
        run: |
          echo "::group::üîç Debug final"
          echo "Estrutura completa do diret√≥rio:"
          ls -R
          echo "::endgroup::"

      # ==== CLEANUP ====
      - name: Cleanup
        if: always()
        run: |
          set -eo pipefail

          echo "::group::üßπ Limpando ambiente"
          if [ -f /tmp/xvfb.pid ]; then
            kill $(cat /tmp/xvfb.pid) || true
            rm /tmp/xvfb.pid
          fi
          pkill Xvfb || true
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          echo "::endgroup::"
