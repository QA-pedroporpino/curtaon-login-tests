# =================================================================
# Workflow de Testes Automatizados - CurtaON
# Mantido por: Time de QA
# Última atualização: Fevereiro 2024
# =================================================================

name: Testes de Login Diários

# Definição dos triggers do workflow
on:
  # Execução agendada - 3h UTC (meia-noite horário de Brasília)
  schedule:
    - cron: "0 3 * * *"
  # Permite execução manual via UI
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Habilitar modo debug com logs detalhados"
        required: false
        default: false
        type: boolean

# Configurações globais e permissões
permissions:
  contents: read
  actions: write
  checks: write # Necessário para publicar resultados de teste

# Variáveis de ambiente globais
env:
  PYTHON_VERSION: "3.11"
  PYTHONUNBUFFERED: "1" # Força output sem buffer
  FORCE_COLOR: "1" # Força saída colorida
  DEBIAN_FRONTEND: "noninteractive"
  # Configurações do Chrome
  DISPLAY: ":99"
  CHROME_BIN: "/usr/bin/google-chrome"
  # Diretórios de artefatos
  ARTIFACT_DIR: "${{ github.workspace }}/artifacts"
  REPORT_DIR: "${{ github.workspace }}/artifacts/reports"
  SCREENSHOT_DIR: "${{ github.workspace }}/artifacts/screenshots"
  LOG_DIR: "${{ github.workspace }}/artifacts/logs"

jobs:
  test:
    name: Executar Suite de Testes
    runs-on: ubuntu-latest

    steps:
      # ==== SETUP DO AMBIENTE ====
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            setup.py

      # ==== SETUP DO CHROME E XVFB ====
      - name: Setup Chrome e ambiente gráfico
        id: setup-chrome
        run: |
          set -eo pipefail

          echo "::group::🔧 Instalando dependências do sistema"
          sudo apt-get update -q
          sudo apt-get install -y --no-install-recommends \
            xvfb \
            libnss3 \
            libgconf-2-4 \
            libfontconfig1
          echo "::endgroup::"

          echo "::group::🌐 Instalando Google Chrome"
          # Remove versão antiga se existir
          sudo apt-get remove -y google-chrome-stable || true

          # Baixa e instala a versão mais recente do Chrome
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -f install -y
          rm google-chrome-stable_current_amd64.deb

          # Obtém a versão exata do Chrome instalado
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3)
          CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d '.' -f 1)
          echo "chrome_version=${CHROME_VERSION}" >> $GITHUB_OUTPUT
          echo "::endgroup::"

          echo "::group::🔧 Instalando ChromeDriver"
          # Download e instalação do ChromeDriver compatível
          wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROME_VERSION}/linux64/chromedriver-linux64.zip"
          unzip -q chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          rm -rf chromedriver-linux64*
          echo "::endgroup::"

          echo "::group::🖥️ Configurando Display Virtual"
          # Inicia Xvfb em background
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "::endgroup::"

          echo "::group::✅ Verificando versões"
          echo "Chrome version: $(google-chrome --version)"
          echo "ChromeDriver version: $(chromedriver --version)"
          echo "::endgroup::"

      # ==== SETUP PYTHON E DEPENDÊNCIAS ====
      - name: Setup ambiente Python
        id: setup-env
        run: |
          set -eo pipefail

          echo "::group::🐍 Criando ambiente virtual"
          python -m venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "::endgroup::"

          echo "::group::📦 Instalando dependências"
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-html pytest-cov pytest-xdist pytest-timeout
          pip install -e .
          echo "::endgroup::"

      # ==== PREPARAÇÃO DOS DIRETÓRIOS ====
      - name: Preparar diretórios
        run: |
          mkdir -p "$ARTIFACT_DIR"/{reports,screenshots,logs}
          chmod -R 777 "$ARTIFACT_DIR"

      # ==== EXECUÇÃO DOS TESTES ====
      - name: Executar testes
        id: run-tests
        timeout-minutes: 30 # Timeout de segurança
        env:
          PYTHONPATH: ${{ github.workspace }}/src
          # Adicione outras variáveis de ambiente necessárias aqui
          # TEST_BASE_URL: ${{ secrets.TEST_BASE_URL }}
        run: |
          set -eo pipefail

          echo "::group::🧪 Executando suite de testes"
          pytest tests/ \
            --html="${REPORT_DIR}/report.html" \
            --self-contained-html \
            -v \
            --reruns 2 \
            --reruns-delay 1 \
            -n auto \
            --dist loadfile \
            --cov=src \
            --cov-report=html:"${REPORT_DIR}/coverage" \
            --cov-report=xml:"${REPORT_DIR}/coverage.xml" \
            --log-cli-level=INFO \
            --capture=tee-sys \
            --timeout=300 \
            --junitxml="${REPORT_DIR}/junit.xml" \
            | tee "${LOG_DIR}/pytest.log"
          echo "::endgroup::"

      # ==== PUBLICAÇÃO DE ARTEFATOS ====
      - name: Publicar artefatos
        if: always() # Executa mesmo se os testes falharem
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            ${{ env.ARTIFACT_DIR }}
          retention-days: 14
          if-no-files-found: error

      # ==== PUBLICAÇÃO DE RESULTADOS ====
      - name: Publicar resultados dos testes
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "${{ env.REPORT_DIR }}/junit.xml"
          comment_mode: off

      # ==== CLEANUP ====
      - name: Cleanup
        if: always()
        run: |
          set -eo pipefail

          echo "::group::🧹 Limpando ambiente"
          pkill Xvfb || true
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          echo "::endgroup::"
