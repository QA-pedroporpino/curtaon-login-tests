import pytest
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException, ElementClickInterceptedException, NoSuchElementException
import os
import sys
from selenium.webdriver.support.ui import WebDriverWait
import time

# Adiciona o diret√≥rio raiz ao PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# Importa√ß√£o do arquivo base_test.py
from tests.test_cases_improved.base_test import Config, Dados, Logger, Screenshot

class TestLoginValidoOtimizado:
    """
    üß™ Suite de testes para valida√ß√£o de login com credenciais v√°lidas
    
    Esta suite cont√©m testes que validam o fluxo completo de login no sistema CurtaON!,
    garantindo que usu√°rios possam acessar a plataforma com suas credenciais.
    
    Atributos:
        driver: Inst√¢ncia do WebDriver
        login_page: P√°gina de login com os m√©todos de intera√ß√£o
        logger: Sistema de logging personalizado
    
    Tags: 
        @smoke: Testes cr√≠ticos que devem ser executados em cada build
        @regression: Testes completos para valida√ß√£o de regress√£o
    """
    
    @pytest.fixture(autouse=True)
    def setup_teardown(self, driver, login_page):
        """
        üîß Configura√ß√£o e limpeza do ambiente de teste
        
        Args:
            driver: Inst√¢ncia do WebDriver (injetada pelo pytest)
            login_page: P√°gina de login (injetada pelo pytest)
        """
        self.driver = driver
        self.login_page = login_page
        self.logger = Logger.criar("login_valido_otimizado")
        
        # Setup
        self.logger.info("üî∑" * 30)
        self.logger.info("üöÄ INICIANDO TESTE: LOGIN V√ÅLIDO")
        self.logger.info("üî∑" * 30)
        
        yield
        
        # Teardown
        self.logger.info("üî∑" * 30)
        self.logger.info("üèÅ FINALIZANDO TESTE: LOGIN V√ÅLIDO")
        self.logger.info("üî∑" * 30)
    
    @pytest.mark.smoke
    @pytest.mark.regression
    def test_login_valido_fluxo_completo(self):
        """
        üéØ TC-001: Valida√ß√£o do fluxo completo de login com credenciais v√°lidas
        
        Verifica se um usu√°rio consegue realizar login com sucesso utilizando
        credenciais v√°lidas, seguindo o fluxo completo desde o acesso ao site
        at√© o redirecionamento para a p√°gina principal.
        
        Passos do teste:
        1. Acessar o site do CurtaON
        2. Clicar no bot√£o 'Entrar'
        3. Selecionar login por email
        4. Preencher credenciais v√°lidas
        5. Validar redirecionamento
        
        Resultado esperado:
        - Usu√°rio √© redirecionado para a p√°gina principal ap√≥s login bem-sucedido
        """
        try:
            # Acessa o site
            self.driver.get(self.login_page.URL)
            self.logger.info("Acessando o site")
            
            # Aguarda um tempo para evitar reCAPTCHA
            time.sleep(5)
            
            # Verifica se o modal de login j√° est√° aberto
            try:
                modal = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.ID, "header_MenuCurtaoOn_btnLoginModalEntrar"))
                )
                if modal.is_displayed():
                    self.logger.info("Modal de login j√° est√° aberto")
                else:
                    # Clica no bot√£o "Entrar"
                    self.login_page.clicar_botao_entrar()
                    self.logger.info("Clicando no bot√£o 'Entrar'")
            except TimeoutException:
                # Clica no bot√£o "Entrar" se o modal n√£o estiver vis√≠vel
                self.login_page.clicar_botao_entrar()
                self.logger.info("Clicando no bot√£o 'Entrar'")
            
            # 3Ô∏è‚É£ Preenchimento do formul√°rio
            self.logger.info(f"‚úèÔ∏è Preenchendo formul√°rio com email: '{Dados.EMAIL_VALIDO}'")
            self.login_page.fazer_login(Dados.EMAIL_VALIDO, Dados.SENHA_CORRETA)
            
            # 4Ô∏è‚É£ Valida√ß√£o do redirecionamento
            self.logger.info("‚è≥ Aguardando redirecionamento ap√≥s login")
            self._validar_redirecionamento()
            
            # 5Ô∏è‚É£ Captura de evid√™ncia
            Screenshot.capturar(self.driver, "login_valido", True)
            self.logger.info("üì∏ Screenshot de sucesso capturado")
            
            # 6Ô∏è‚É£ Registro de sucesso
            self.logger.info("‚úÖ TESTE APROVADO: Login realizado com sucesso")
            
        except TimeoutException as e:
            self.logger.error(f"‚è∞ Timeout ao aguardar elemento: {str(e)}")
            Screenshot.capturar(self.driver, "login_valido_timeout", False)
            raise
        
        except ElementClickInterceptedException as e:
            self.logger.error(f"üö´ Elemento n√£o clic√°vel (interceptado): {str(e)}")
            Screenshot.capturar(self.driver, "login_valido_click_error", False)
            raise
            
        except NoSuchElementException as e:
            self.logger.error(f"‚ùå Elemento n√£o encontrado: {str(e)}")
            Screenshot.capturar(self.driver, "login_valido_element_error", False)
            raise
            
        except Exception as e:
            self.logger.error(f"üí• Erro inesperado durante o teste: {str(e)}")
            Screenshot.capturar(self.driver, "login_valido_erro", False)
            raise
    
    def _interagir_com_modal_login(self):
        """
        M√©todo auxiliar para interagir com o modal de login
        Tenta identificar se o modal j√° est√° aberto antes de clicar no bot√£o
        """
        self.logger.info("üîò Verificando estado do modal de login")
        try:
            modal = self.driver.find_element(By.ID, "login-modal")
            if not modal.is_displayed():
                self.logger.info("üîò Modal fechado, clicando no bot√£o 'Entrar'")
                self.login_page.clicar_botao_entrar()
            else:
                self.logger.info("‚úÖ Modal de login j√° est√° aberto")
        except NoSuchElementException:
            self.logger.info("üîò Modal n√£o encontrado, clicando no bot√£o 'Entrar'")
            self.login_page.clicar_botao_entrar()
        
        self.logger.info("üîò Clicando no bot√£o 'E-mail'")
        self.login_page.clicar_botao_email()
    
    def _validar_redirecionamento(self):
        """
        M√©todo auxiliar para validar o redirecionamento ap√≥s o login
        Verifica se a URL mudou e aguarda um tempo para garantir o carregamento
        
        Raises:
            TimeoutException: Se o redirecionamento n√£o ocorrer no tempo esperado
        """
        try:
            # Aguarda at√© que a URL mude para a p√°gina principal
            self.login_page.wait.until(
                lambda driver: driver.current_url != Config.URL
            )
            self.logger.info("‚úÖ Redirecionamento confirmado")
            
            # Aguarda um tempo para garantir o carregamento completo
            time.sleep(2)
            self.logger.info("‚è≥ Aguardando estabiliza√ß√£o da p√°gina")
            
        except TimeoutException:
            self.logger.error("‚ùå Redirecionamento n√£o ocorreu no tempo esperado")
            raise

if __name__ == "__main__":
    # Configura√ß√£o para execu√ß√£o direta
    import logging
    logging.basicConfig(level=logging.INFO)
    
    # Executa o teste
    pytest.main([__file__, "-v", "--capture=no"]) 